from keras.preprocessing.image import ImageDataGenerator
import numpy as np

def random_crop(img_x, img_y, random_crop_size, n_crops):
    assert img_x.shape[:2] == img_y.shape[:2]
    height, width = img_x.shape[0], img_x.shape[1]
    dy, dx = random_crop_size
    
    x = np.random.randint(0, width - dx + 1, n_crops)
    y = np.random.randint(0, height - dy + 1, n_crops)
    
    cropped_x = np.zeros((n_crops, dx, dx, img_x.shape[2]))
    cropped_y = np.zeros((n_crops, dy, dy, img_y.shape[2]))
    
    for i in range(n_crops):
        cropped_x[i] = img_x[y[i]:(y[i]+dy), x[i]:(x[i]+dx), :]
        cropped_y[i] = img_y[y[i]:(y[i]+dy), x[i]:(x[i]+dx), :]
    return cropped_x, cropped_y

def crop_generator(xy_gen, crop_length, n_crops=1):
    """Take as input two zipped Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    while True:
        batch_x, batch_y = next(xy_gen)
        batch_x_crops = np.zeros((batch_x.shape[0]*n_crops, crop_length, crop_length, batch_x.shape[3]))
        batch_y_crops = np.zeros((batch_y.shape[0]*n_crops, crop_length, crop_length, batch_y.shape[3]))
        
        for i in range(batch_x.shape[0]):
            batch_x_crops[i*n_crops:(i+1)*n_crops], batch_y_crops[i*n_crops:(i+1)*n_crops] = random_crop(batch_x[i], batch_y[i], (crop_length, crop_length), n_crops)
        yield batch_x_crops, batch_y_crops

def load_data(input_dir, target_dir, aug_gen_args, seed, input_img_size, batch_size, grayscale_x=True, crop_length=None, n_crops=None):

    image_datagen = ImageDataGenerator(**aug_gen_args)
    mask_datagen = ImageDataGenerator(preprocessing_function=lambda x: (x>127).astype(int), **aug_gen_args)

    train_image_generator = image_datagen.flow_from_directory(input_dir, class_mode=None,seed=seed, subset='training', color_mode='grayscale' if grayscale_x==True else 'rgb', target_size = input_img_size, batch_size = batch_size)
    train_mask_generator = mask_datagen.flow_from_directory(target_dir, class_mode=None,seed=seed, subset='training', color_mode='grayscale', target_size = input_img_size, batch_size = batch_size)

    valid_image_generator = image_datagen.flow_from_directory(input_dir, class_mode=None,seed=seed, subset='validation', color_mode='grayscale' if grayscale_x==True else 'rgb', target_size = input_img_size)
    valid_mask_generator = mask_datagen.flow_from_directory(target_dir, class_mode=None,seed=seed, subset='validation', color_mode='grayscale', target_size = input_img_size)

    train_generator = zip(train_image_generator, train_mask_generator)
    valid_generator = zip(valid_image_generator, valid_mask_generator)

    if n_crops!= None and crop_length!= None:
        train_generator = crop_generator(train_generator, crop_length, n_crops)
        valid_generator = crop_generator(valid_generator, crop_length, n_crops)
    
    return train_generator, valid_generator